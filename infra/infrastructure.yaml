Resources:
  UploadFileSQS:
    Type: "AWS::SQS::Queue"
    Properties: 
      QueueName: "upload-file-sqs"

  BucketLambda:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "lambda-bucket"

  BucketAudios:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "audios"

  ProcessedFilesBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "processed-files"

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaSQSS3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: !Sub "arn:aws:s3:::${BucketAudios}/*"
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${ProcessedFilesBucket}/*"
  
  ProcessS3EventFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: process-file
      Handler: "handler.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref BucketLambda
        S3Key: "lambda.zip"
      Runtime: "python3.8"
  
  LambdaSQSTrigger:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt UploadFileSQS.Arn
      FunctionName: !GetAtt ProcessS3EventFunction.Arn
      Enabled: "True"