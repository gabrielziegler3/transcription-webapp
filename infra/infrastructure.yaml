Resources:
  BucketAudios:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - QueuePolicy
    Properties:
      BucketName: !Sub "audios-${AWS::AccountId}"
      NotificationConfiguration:
        QueueConfigurations:
          - Event: "s3:ObjectCreated:*"
            Queue: !GetAtt UploadFileSQS.Arn

  ProcessedFilesBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "processed-files-${AWS::AccountId}"

  QueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowS3ToPublish"
            Effect: Allow
            Principal:
              Service: "s3.amazonaws.com"
            Action:
              - 'SQS:SendMessage'
              - 'SQS:ReceiveMessage'
            Resource: !GetAtt UploadFileSQS.Arn
      Queues:
        - !Ref UploadFileSQS

  UploadFileSQS:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub "upload-file-sqs-${AWS::AccountId}"

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaSQSS3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: !Sub "arn:aws:s3:::${BucketAudios}/*"
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${ProcessedFilesBucket}/*"
        - PolicyName: "CloudWatchLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  ProcessS3EventFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "process-file-${AWS::AccountId}"
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !ImportValue "BucketLambdaExportName"
        S3Key: "lambda.zip"
      Runtime: "python3.8"
      Environment:
        Variables:
          RESULT_BUCKET_NAME: !Sub "processed-files-${AWS::AccountId}"

  LambdaSQSTrigger:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt UploadFileSQS.Arn
      FunctionName: !GetAtt ProcessS3EventFunction.Arn
      Enabled: "True"

  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProcessS3EventFunction}'
      RetentionInDays: 2

  LambdaLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Ref LambdaLogGroup
      LogStreamName: !Sub '${AWS::StackName}-stream'
